---
version: 2.1
executors:
  machine_image:
    machine:
      image: ubuntu-1604:201903-01

  docker1809:
    docker:
      - image: docker:18.09

  helm:
    docker:
     - image: alpine/helm:2.13.0

commands:
  import_image:
    description: Import the agent image archive from the build job.
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load agent image
          command: |
            [ -f ~/.skip ] && echo "Found ~/.skip, skipping docker image load!" && exit 0
            docker load -i /tmp/workspace/image.tar

  save_test_results:
    description: Collect and archive test results from `dir`.
    parameters:
      dir:
        type: string
        default: "~/testresults"
    steps:
      - store_test_results:
          path: << parameters.dir >>
      - store_artifacts:
          path: << parameters.dir >>

  install_golang:
    parameters:
      version:
        type: string
        default: 1.12.1
    steps:
      - restore_cache:
          key: "v1-golang-<< parameters.version >>"
      - run:
          name: Install golang
          command: |
            echo "export GOROOT=/home/circleci/go" >> $BASH_ENV
            echo "export GOPATH=/home/circleci/gopath" >> $BASH_ENV
            echo "export PATH=\$GOROOT/bin:\$GOPATH/bin:$PATH" >> $BASH_ENV
            [[ -d /home/circleci/go ]] && exit 0
            wget -O /tmp/golang.tar.gz https://dl.google.com/go/go<< parameters.version >>.linux-amd64.tar.gz
            tar -zxf /tmp/golang.tar.gz -C /home/circleci/
      - save_cache:
          key: "v1-golang-<< parameters.version >>"
          paths:
            - /home/circleci/go

  install_kubectl:
    parameters:
      version:
        type: string
        default: v1.12.0
    steps:
      - restore_cache:
          key: "v1-kubectl-binary-<< parameters.version >>"
      - run:
          name: Install Kubectl
          command: |
            [[ -f /home/circleci/bin/kubectl ]] && exit 0
            sudo wget -O /home/circleci/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/<< parameters.version >>/bin/linux/amd64/kubectl
            sudo chmod a+x /home/circleci/bin/kubectl
      - save_cache:
          key: "v1-kubectl-binary-<< parameters.version >>"
          paths:
            - /home/circleci/bin/kubectl

  install_minikube:
    parameters:
      version:
        type: string
        default: v1.3.1
    steps:
      - restore_cache:
          key: "v1-minikube-binary-<< parameters.version >>"
      - run:
          name: Install minikube
          command: |
            [[ -f /home/circleci/bin/minikube ]] && exit 0
            sudo wget -O /home/circleci/bin/minikube https://storage.googleapis.com/minikube/releases/<< parameters.version >>/minikube-linux-amd64
            sudo chmod a+x /home/circleci/bin/minikube
      - save_cache:
          key: "v1-minikube-binary-<< parameters.version >>"
          paths:
            - /home/circleci/bin/minikube

  install_helm:
    parameters:
      version:
        type: string
        default: v2.13.0
    steps:
      - restore_cache:
          key: "v2-helm-binary-<< parameters.version >>"
      - run:
          name: Install Helm
          command: |
            [[ -f /home/circleci/bin/helm ]] && exit 0
            wget -O /tmp/helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-<< parameters.version >>-linux-amd64.tar.gz
            sudo tar -zxf /tmp/helm.tar.gz -C /tmp
            sudo mv /tmp/linux-amd64/helm /home/circleci/bin/helm
            sudo chmod a+x /home/circleci/bin/helm
      - save_cache:
          key: "v2-helm-binary-<< parameters.version >>"
          paths:
            - /home/circleci/bin/helm

  start_minikube:
    parameters:
      version:
        type: string
        default: v1.3.1
      k8s_version:
        type: string
        default: v1.12.0
      options:
        type: string
        default: --vm-driver=none --wait=true --kubernetes-version=<< parameters.k8s_version >> --extra-config=kubeadm.ignore-preflight-errors=FileExisting-crictl
    steps:
      - install_kubectl:
          version: << parameters.k8s_version >>
      - install_minikube:
          version: << parameters.version >>
      - run:
          name: Start minikube
          environment:
            MINIKUBE_IN_STYLE: "false"
            MINIKUBE_WANTUPDATENOTIFICATION: "false"
            MINIKUBE_WANTREPORTERRORPROMPT: "false"
            CHANGE_MINIKUBE_NONE_USER: "true"
          command: |
            sudo "PATH=$PATH" -E /home/circleci/bin/minikube start << parameters.options >>

jobs:
  build_image:
    executor: docker1809
    environment:
      REGISTRY: quay.io/signalfx
      IMAGE: k8s-metrics-adapter
      VERSION: latest
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: |
          apk add make bash
          PUSH=no make image
      - run: |
          mkdir -p /tmp/workspace
          docker save -o /tmp/workspace/image.tar ${REGISTRY}/${IMAGE}:${VERSION}
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - image.tar

  helm_lint:
    executor: helm
    steps:
      - checkout
      - run: |
          helm lint ./deployments/helm/signalfx-k8s-metrics-adapter || \
          (echo 'Helm lint issues found!' && exit 1)

  k8s_tests:
    executor: machine_image
    parameters:
      go_version:
        type: string
        default: 1.12.1
      k8s_version:
        type: string
        default: v1.12.0
    steps:
      - checkout
      - install_golang:
          version: << parameters.go_version >>
      - start_minikube:
          k8s_version: << parameters.k8s_version >>
      - run:
          name: Run integration tests
          command: |
            set -o pipefail
            mkdir ~/testresults
            (cd /tmp; GO111MODULE=on go get github.com/tebeka/go2xunit)
            make -s test | tee /dev/stderr | go2xunit | tee ~/testresults/results.xml
      - save_test_results

  helm_tests:
    executor: machine_image
    parameters:
      k8s_version:
        type: string
        default: v1.12.0
    steps:
      - checkout
      - install_helm
      - start_minikube:
          k8s_version: << parameters.k8s_version >>
      - import_image
      - run:
          name: Deploy helm chart
          command: |
            set -o pipefail
            wait_for() {
                start_time=$(date +%s)
                while [ $(expr `date +%s` - $start_time) -lt 60 ]; do
                    ( "$@" ) && return 0
                    sleep 2
                done
                return 1
            }
            helm init
            wait_for bash -ec 'helm status |& grep -qv "could not find a ready tiller pod"' || \
                (echo "Timed out waiting for tiller to be ready!" && exit 1)
            helm install \
                --set accessToken=testing123 \
                --set image=quay.io/signalfx/k8s-metrics-adapter \
                --set imageTag=latest \
                --set imagePullPolicy=IfNotPresent \
                -f ./deployments/helm/signalfx-k8s-metrics-adapter/values.yaml \
                ./deployments/helm/signalfx-k8s-metrics-adapter
            release_name=$(helm list --short)
            # helm status code 1 == DEPLOYED
            wait_for bash -eco pipefail "helm status $release_name -o json | jq '.info.status.code==1' | grep -iq true" || \
                (echo "Timed out waiting for helm chart to be deployed!" && helm status $release_name && exit 1)
            selector="--selector app=signalfx-k8s-metrics-adapter"
            pod_is_running="kubectl get pods $selector --output=jsonpath={.items..status.phase} | grep -iq running"
            wait_for bash -eco pipefail "$pod_is_running" || \
                (echo "Timed out waiting for adapter pod to be running!" && kubectl describe pod $selector && exit 1)
            # check if the pod is still running after 10 seconds
            sleep 10
            bash -eco pipefail "$pod_is_running" || \
                (echo "Adaptor pod no longer running!" && kubectl describe pod $selector && exit 1)

workflows:
  build_test:
    jobs:
      - build_image
      - helm_lint
      - k8s_tests:
          name: k8s_v1.12.0_tests
          k8s_version: v1.12.0
      - k8s_tests:
          name: k8s_v1.15.0_tests
          k8s_version: v1.15.0
      - helm_tests:
          name: helm_k8s_v1.12.0_tests
          k8s_version: v1.12.0
          requires:
            - build_image
      - helm_tests:
          name: helm_k8s_v1.15.0_tests
          k8s_version: v1.15.0
          requires:
            - build_image
