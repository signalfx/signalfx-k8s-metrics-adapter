name: Helm Test

on:
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: "quay.io/signalfx"
  IMAGE_NAME: "k8s-metrics-adapter"
  IMAGE_VERSION: "latest"
  GO_VERSION: "1.19.0"
  MINIKUBE_VERSION: "v1.28.0"
  HELM_VERSION: "v3.9.0"

jobs:
  build-image:
    name: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Build image
        run: |
          PUSH=no make image
          mkdir -p dist
          docker save -o dist/image.tar ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

      - name: Save image
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: ./dist/image.tar

  helm-lint:
    name: helm-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Cache helm
        uses: actions/cache@v3
        with:
          path: /tmp/helm.tar.gz
          key: v1-helm-binary-${{ env.HELM_VERSION }}

      - name: Install helm
        run: |
          if [[ ! -e "/tmp/helm.tar.gz" ]]; then
            wget -q -O "/tmp/helm.tar.gz" https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz
          fi
          sudo tar -zxf /tmp/helm.tar.gz -C /tmp
          sudo install /tmp/linux-amd64/helm /usr/local/bin/helm
          sudo chmod a+x /usr/local/bin/helm

      - name: helm lint
        run: |
          helm lint ./deployments/helm/signalfx-k8s-metrics-adapter || \
            (echo 'Helm lint issues found!' && exit 1)

  helm-test:
    name: helm-test
    runs-on: ubuntu-latest
    needs:
      - helm-lint
      - build-image
    strategy:
      matrix:
        K8S_VERSION: [ "v1.24.0", "v1.25.0" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: image
          path: ./dist

      - name: Load image
        run: docker load -i ./dist/image.tar

      - name: Cache kubectl
        uses: actions/cache@v3
        with:
          path: /tmp/kubectl
          key: v1-kubectl-binary-${{ matrix.K8S_VERSION }}

      - name: Download kubectl
        run: |
          if [[ ! -e "/tmp/kubectl" ]]; then
            wget -q -O "/tmp/kubectl" https://storage.googleapis.com/kubernetes-release/release/${{ matrix.K8S_VERSION }}/bin/linux/amd64/kubectl
          fi
          sudo install /tmp/kubectl /usr/local/bin/kubectl
          sudo chmod a+x /usr/local/bin/kubectl

      - name: Cache helm
        uses: actions/cache@v3
        with:
          path: /tmp/helm.tar.gz
          key: v1-helm-binary-${{ env.HELM_VERSION }}

      - name: Install helm
        run: |
          if [[ ! -e "/tmp/helm.tar.gz" ]]; then
            wget -q -O "/tmp/helm.tar.gz" https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz
          fi
          sudo tar -zxf /tmp/helm.tar.gz -C /tmp
          sudo install /tmp/linux-amd64/helm /usr/local/bin/helm
          sudo chmod a+x /usr/local/bin/helm

      - name: Cache minikube
        uses: actions/cache@v3
        with:
          path: /tmp/minikube
          key: v1-minikube-binary-${{ env.MINIKUBE_VERSION }}

      - name: Download minikube
        run: |
          if [[ ! -e "/tmp/minikube" ]]; then
            wget -q -O "/tmp/minikube" https://storage.googleapis.com/minikube/releases/${{ env.MINIKUBE_VERSION }}/minikube-linux-amd64
          fi
          sudo install /tmp/minikube /usr/local/bin/minikube
          sudo chmod a+x /usr/local/bin/minikube
          sudo sysctl fs.protected_regular=0

      - name: Start minikube
        run: |
          minikube start --container-runtime=docker --cpus 2 --memory 4096 --kubernetes-version=${{ matrix.K8S_VERSION }} --no-vtx-check
          export JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
          until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
            sleep 1;
          done

      - name: Run test
        run: |
          set -xo pipefail
          wait_for() {
              start_time=$(date +%s)
              while [ $(expr `date +%s` - $start_time) -lt 60 ]; do
                  ( "$@" ) && return 0
                  sleep 2
              done
              return 1
          }
          helm install \
              --generate-name \
              --set accessToken=testing123 \
              --set image=quay.io/signalfx/k8s-metrics-adapter \
              --set imageTag=latest \
              --set imagePullPolicy=IfNotPresent \
              -f ./deployments/helm/signalfx-k8s-metrics-adapter/values.yaml \
              ./deployments/helm/signalfx-k8s-metrics-adapter
          release_name=$(helm list --short)
          wait_for bash -eco pipefail "helm status $release_name -o json | jq -r '.info.status' | grep -iq deployed" || \
              (echo "Timed out waiting for helm chart to be deployed!" && helm status $release_name && exit 1)
          selector="--selector app=signalfx-k8s-metrics-adapter"
          pod_is_running="kubectl get pods $selector --output=jsonpath={.items..status.phase} | grep -iq running"
          wait_for bash -eco pipefail "$pod_is_running" || \
              (echo "Timed out waiting for adapter pod to be running!" && kubectl describe pod $selector && exit 1)
          # check if the pod is still running after 10 seconds
          sleep 10
          bash -eco pipefail "$pod_is_running" || \
              (echo "Adaptor pod no longer running!" && kubectl describe pod $selector && exit 1)